//@ts-ignore
import python from "./calculations.py";

import "w3c-web-usb/index";

declare var pyodide: any;
declare var loadPyodide: any;

export type FrameFormat = "bgr565" | "rgb" | "imagedata"

export const DISPLAY_WIDTH = 960
export const DISPLAY_HEIGHT = 160

const ABLETON_VENDOR_ID = 0x2982
const PUSH2_PRODUCT_ID = 0x1967

const DISPLAY_FRAME_HEADER = new Uint8Array([0xff, 0xcc, 0xaa, 0x88,
    0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00])

export class Push2DisplayDriver {
    constructor(canvas: HTMLCanvasElement | OffscreenCanvas) {
        if (canvas.width !== DISPLAY_WIDTH || canvas.height !== DISPLAY_HEIGHT) {
            throw new Error(`Incorrect canvas dimensions (must be ${DISPLAY_WIDTH}x${DISPLAY_HEIGHT})`)
        }

        this.context = canvas.getContext('2d')
    }

    device: USBDevice;
    context: CanvasRenderingContext2D | OffscreenCanvasRenderingContext2D;

    private _isDrawing: boolean;
    public get isDrawing(): boolean {
        return this._isDrawing;
    }

    async initialize() {
        await Promise.all([this.initializePython(), this.initializeUSB()])

        try {
            // Ensure we can send a frame
            const frame = await this.prepareBlackFrame()
            await this.draw(frame)
        } catch (e) {
            throw new Error(`Error sending test frame: ${e.message}`)
        }
    }

    private async initializePython() {
        await loadPyodide({
            indexURL: "https://cdn.jsdelivr.net/pyodide/v0.17.0/full/",
        });

        await pyodide.loadPackage('numpy');

        // Initialize screen functions
        await pyodide.runPythonAsync(python);
    }
    private async initializeUSB() {
        try {
            this.device = await navigator.usb
                .requestDevice({ filters: [{ vendorId: ABLETON_VENDOR_ID, productId: PUSH2_PRODUCT_ID }] })

            await this.device.open();
            await this.device.selectConfiguration(1);

            // Claim Push 2 Display Interface
            await this.device.claimInterface(0);
        } catch (e) {
            throw new Error(`USB connection error: ${e.message}`)
        }
    }

    private async drawLoop() {
        // Draw as fast as possible (the Push 2 can hit 60fps, our browser almost certainly cannot)
        while (this._isDrawing) {
            const imageData = this.context.getImageData(0, 0, DISPLAY_WIDTH, DISPLAY_HEIGHT);

            const frame = await this.prepareFrame(imageData.data, 'imagedata')
            await this.draw(frame)
        }

        const frame = await this.prepareBlackFrame()
        await this.draw(frame)
    }

    start() {
        this._isDrawing = true
        this.drawLoop()
    }

    stop() {
        this._isDrawing = false
    }

    dispose() {
        this.stop();

        (async () => {
            await this.device.releaseInterface(0)
            await this.device.close()
        })()
    }

    async draw(frame: Uint8Array) {
        await this.device.transferOut(1, DISPLAY_FRAME_HEADER);
        await this.device.transferOut(1, frame);
    }

    async prepareFrame(frame: Uint8Array | Uint8ClampedArray, format: FrameFormat): Promise<Uint8Array> {
        return await pyodide.globals.get('prepare_frame')(frame, format).toJs()
    }

    async prepareBlackFrame(): Promise<Uint8Array> {
        return await pyodide.globals.get('prepare_black_frame')().toJs();
    }
}